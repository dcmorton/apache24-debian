Rename prefork to itk in the copy that was created in 01-copy-prefork.patch.

Index: httpd-2.4.1/server/mpm/itk/config.m4
===================================================================
--- httpd-2.4.1.orig/server/mpm/itk/config.m4
+++ httpd-2.4.1/server/mpm/itk/config.m4
@@ -1,7 +1,7 @@
-AC_MSG_CHECKING(if prefork MPM supports this platform)
+AC_MSG_CHECKING(if itk MPM supports this platform)
 if test $forking_mpms_supported != yes; then
     AC_MSG_RESULT(no - This is not a forking platform)
 else
     AC_MSG_RESULT(yes)
-    APACHE_MPM_SUPPORTED(prefork, yes, no)
+    APACHE_MPM_SUPPORTED(itk, yes, no)
 fi
Index: httpd-2.4.1/server/mpm/itk/config3.m4
===================================================================
--- httpd-2.4.1.orig/server/mpm/itk/config3.m4
+++ httpd-2.4.1/server/mpm/itk/config3.m4
@@ -1 +1 @@
-APACHE_MPM_MODULE(prefork, $enable_mpm_prefork)
+APACHE_MPM_MODULE(itk, $enable_mpm_itk)
Index: httpd-2.4.1/server/mpm/itk/itk.c
===================================================================
--- httpd-2.4.1.orig/server/mpm/itk/itk.c
+++ httpd-2.4.1/server/mpm/itk/itk.c
@@ -95,11 +95,11 @@ static int server_limit = 0;
 static int mpm_state = AP_MPMQ_STARTING;
 static ap_pod_t *pod;
 
-/* data retained by prefork across load/unload of the module
+/* data retained by itk across load/unload of the module
  * allocated on first call to pre-config hook; located on
  * subsequent calls to pre-config hook
  */
-typedef struct prefork_retained_data {
+typedef struct itk_retained_data {
     int first_server_limit;
     int module_loads;
     ap_generation_t my_generation;
@@ -122,8 +122,8 @@ typedef struct prefork_retained_data {
 #define MAX_SPAWN_RATE  (32)
 #endif
     int hold_off_on_exponential_spawning;
-} prefork_retained_data;
-static prefork_retained_data *retained;
+} itk_retained_data;
+static itk_retained_data *retained;
 
 #define MPM_CHILD_PID(i) (ap_scoreboard_image->parent[i].pid)
 
@@ -189,7 +189,7 @@ static void chdir_for_gprof(void)
 #define chdir_for_gprof()
 #endif
 
-static void prefork_note_child_killed(int childnum, pid_t pid,
+static void itk_note_child_killed(int childnum, pid_t pid,
                                       ap_generation_t gen)
 {
     AP_DEBUG_ASSERT(childnum != -1); /* no scoreboard squatting with this MPM */
@@ -200,7 +200,7 @@ static void prefork_note_child_killed(in
     ap_scoreboard_image->parent[childnum].pid = 0;
 }
 
-static void prefork_note_child_started(int slot, pid_t pid)
+static void itk_note_child_started(int slot, pid_t pid)
 {
     ap_scoreboard_image->parent[slot].pid = pid;
     ap_run_child_status(ap_server_conf,
@@ -219,7 +219,7 @@ static void clean_child_exit(int code)
     }
 
     if (one_process) {
-        prefork_note_child_killed(/* slot */ 0, 0, 0);
+        itk_note_child_killed(/* slot */ 0, 0, 0);
     }
 
     ap_mpm_pod_close(pod);
@@ -277,7 +277,7 @@ static void accept_mutex_off(void)
 #define SAFE_ACCEPT(stmt) do {stmt;} while(0)
 #endif
 
-static int prefork_query(int query_code, int *result, apr_status_t *rv)
+static int itk_query(int query_code, int *result, apr_status_t *rv)
 {
     *rv = APR_SUCCESS;
     switch(query_code){
@@ -330,9 +330,9 @@ static int prefork_query(int query_code,
     return OK;
 }
 
-static const char *prefork_get_name(void)
+static const char *itk_get_name(void)
 {
-    return "prefork";
+    return "itk";
 }
 
 /*****************************************************************
@@ -735,7 +735,7 @@ static int make_child(server_rec *s, int
         apr_signal(SIGQUIT, SIG_DFL);
 #endif
         apr_signal(SIGTERM, sig_term);
-        prefork_note_child_started(slot, getpid());
+        itk_note_child_started(slot, getpid());
         child_main(slot);
         /* NOTREACHED */
     }
@@ -793,7 +793,7 @@ static int make_child(server_rec *s, int
         child_main(slot);
     }
 
-    prefork_note_child_started(slot, pid);
+    itk_note_child_started(slot, pid);
 
     return 0;
 }
@@ -914,7 +914,7 @@ static void perform_idle_server_maintena
  * Executive routines.
  */
 
-static int prefork_run(apr_pool_t *_pconf, apr_pool_t *plog, server_rec *s)
+static int itk_run(apr_pool_t *_pconf, apr_pool_t *plog, server_rec *s)
 {
     int index;
     int remaining_children_to_start;
@@ -1029,7 +1029,7 @@ static int prefork_run(apr_pool_t *_pcon
             if (child_slot >= 0) {
                 (void) ap_update_child_status_from_indexes(child_slot, 0, SERVER_DEAD,
                                                            (request_rec *) NULL);
-                prefork_note_child_killed(child_slot, 0, 0);
+                itk_note_child_killed(child_slot, 0, 0);
                 if (processed_status == APEXIT_CHILDSICK) {
                     /* child detected a resource shortage (E[NM]FILE, ENOBUFS, etc)
                      * cut the fork rate to the minimum
@@ -1094,7 +1094,7 @@ static int prefork_run(apr_pool_t *_pcon
             ap_log_error(APLOG_MARK, APLOG_WARNING, errno, ap_server_conf, APLOGNO(00168) "killpg SIGTERM");
         }
         ap_reclaim_child_processes(1, /* Start with SIGTERM */
-                                   prefork_note_child_killed);
+                                   itk_note_child_killed);
 
         /* cleanup pid file on normal shutdown */
         ap_remove_pid(pconf, ap_pid_fname);
@@ -1128,7 +1128,7 @@ static int prefork_run(apr_pool_t *_pcon
         }
 
         /* Allow each child which actually finished to exit */
-        ap_relieve_child_processes(prefork_note_child_killed);
+        ap_relieve_child_processes(itk_note_child_killed);
 
         /* cleanup pid file */
         ap_remove_pid(pconf, ap_pid_fname);
@@ -1147,7 +1147,7 @@ static int prefork_run(apr_pool_t *_pcon
             sleep(1);
 
             /* Relieve any children which have now exited */
-            ap_relieve_child_processes(prefork_note_child_killed);
+            ap_relieve_child_processes(itk_note_child_killed);
 
             active_children = 0;
             for (index = 0; index < ap_daemons_limit; ++index) {
@@ -1216,7 +1216,7 @@ static int prefork_run(apr_pool_t *_pcon
             ap_log_error(APLOG_MARK, APLOG_WARNING, errno, ap_server_conf, APLOGNO(00172) "killpg SIGHUP");
         }
         ap_reclaim_child_processes(0, /* Not when just starting up */
-                                   prefork_note_child_killed);
+                                   itk_note_child_killed);
         ap_log_error(APLOG_MARK, APLOG_NOTICE, 0, ap_server_conf, APLOGNO(00173)
                     "SIGHUP received.  Attempting to restart");
     }
@@ -1227,7 +1227,7 @@ static int prefork_run(apr_pool_t *_pcon
 /* This really should be a post_config hook, but the error log is already
  * redirected by that point, so we need to do this in the open_logs phase.
  */
-static int prefork_open_logs(apr_pool_t *p, apr_pool_t *plog, apr_pool_t *ptemp, server_rec *s)
+static int itk_open_logs(apr_pool_t *p, apr_pool_t *plog, apr_pool_t *ptemp, server_rec *s)
 {
     int startup = 0;
     int level_flags = 0;
@@ -1257,11 +1257,11 @@ static int prefork_open_logs(apr_pool_t
     return OK;
 }
 
-static int prefork_pre_config(apr_pool_t *p, apr_pool_t *plog, apr_pool_t *ptemp)
+static int itk_pre_config(apr_pool_t *p, apr_pool_t *plog, apr_pool_t *ptemp)
 {
     int no_detach, debug, foreground;
     apr_status_t rv;
-    const char *userdata_key = "mpm_prefork_module";
+    const char *userdata_key = "mpm_itk_module";
 
     mpm_state = AP_MPMQ_STARTING;
 
@@ -1315,7 +1315,7 @@ static int prefork_pre_config(apr_pool_t
     return OK;
 }
 
-static int prefork_check_config(apr_pool_t *p, apr_pool_t *plog,
+static int itk_check_config(apr_pool_t *p, apr_pool_t *plog,
                                 apr_pool_t *ptemp, server_rec *s)
 {
     int startup = 0;
@@ -1401,7 +1401,7 @@ static int prefork_check_config(apr_pool
         ap_daemons_limit = 1;
     }
 
-    /* ap_daemons_to_start > ap_daemons_limit checked in prefork_run() */
+    /* ap_daemons_to_start > ap_daemons_limit checked in itk_run() */
     if (ap_daemons_to_start < 0) {
         if (startup) {
             ap_log_error(APLOG_MARK, APLOG_WARNING | APLOG_STARTUP, 0, NULL, APLOGNO(00184)
@@ -1432,12 +1432,12 @@ static int prefork_check_config(apr_pool
         ap_daemons_min_free = 1;
     }
 
-    /* ap_daemons_max_free < ap_daemons_min_free + 1 checked in prefork_run() */
+    /* ap_daemons_max_free < ap_daemons_min_free + 1 checked in itk_run() */
 
     return OK;
 }
 
-static void prefork_hooks(apr_pool_t *p)
+static void itk_hooks(apr_pool_t *p)
 {
     /* Our open_logs hook function must run before the core's, or stderr
      * will be redirected to a file, and the messages won't print to the
@@ -1445,15 +1445,15 @@ static void prefork_hooks(apr_pool_t *p)
      */
     static const char *const aszSucc[] = {"core.c", NULL};
 
-    ap_hook_open_logs(prefork_open_logs, NULL, aszSucc, APR_HOOK_REALLY_FIRST);
+    ap_hook_open_logs(itk_open_logs, NULL, aszSucc, APR_HOOK_REALLY_FIRST);
     /* we need to set the MPM state before other pre-config hooks use MPM query
      * to retrieve it, so register as REALLY_FIRST
      */
-    ap_hook_pre_config(prefork_pre_config, NULL, NULL, APR_HOOK_REALLY_FIRST);
-    ap_hook_check_config(prefork_check_config, NULL, NULL, APR_HOOK_MIDDLE);
-    ap_hook_mpm(prefork_run, NULL, NULL, APR_HOOK_MIDDLE);
-    ap_hook_mpm_query(prefork_query, NULL, NULL, APR_HOOK_MIDDLE);
-    ap_hook_mpm_get_name(prefork_get_name, NULL, NULL, APR_HOOK_MIDDLE);
+    ap_hook_pre_config(itk_pre_config, NULL, NULL, APR_HOOK_REALLY_FIRST);
+    ap_hook_check_config(itk_check_config, NULL, NULL, APR_HOOK_MIDDLE);
+    ap_hook_mpm(itk_run, NULL, NULL, APR_HOOK_MIDDLE);
+    ap_hook_mpm_query(itk_query, NULL, NULL, APR_HOOK_MIDDLE);
+    ap_hook_mpm_get_name(itk_get_name, NULL, NULL, APR_HOOK_MIDDLE);
 }
 
 static const char *set_daemons_to_start(cmd_parms *cmd, void *dummy, const char *arg)
@@ -1515,7 +1515,7 @@ static const char *set_server_limit (cmd
     return NULL;
 }
 
-static const command_rec prefork_cmds[] = {
+static const command_rec itk_cmds[] = {
 LISTEN_COMMANDS,
 AP_INIT_TAKE1("StartServers", set_daemons_to_start, NULL, RSRC_CONF,
               "Number of child processes launched at server startup"),
@@ -1533,13 +1533,13 @@ AP_GRACEFUL_SHUTDOWN_TIMEOUT_COMMAND,
 { NULL }
 };
 
-AP_DECLARE_MODULE(mpm_prefork) = {
+AP_DECLARE_MODULE(mpm_itk) = {
     MPM20_MODULE_STUFF,
     NULL,                       /* hook to run before apache parses args */
     NULL,                       /* create per-directory config structure */
     NULL,                       /* merge per-directory config structures */
     NULL,                       /* create per-server config structure */
     NULL,                       /* merge per-server config structures */
-    prefork_cmds,               /* command apr_table_t */
-    prefork_hooks,              /* register hooks */
+    itk_cmds,                   /* command apr_table_t */
+    itk_hooks,                  /* register hooks */
 };
Index: httpd-2.4.1/server/mpm/itk/mpm_default.h
===================================================================
--- httpd-2.4.1.orig/server/mpm/itk/mpm_default.h
+++ httpd-2.4.1/server/mpm/itk/mpm_default.h
@@ -15,10 +15,10 @@
  */
 
 /**
- * @file  prefork/mpm_default.h
- * @brief Prefork MPM defaults
+ * @file  itk/mpm_default.h
+ * @brief ITK MPM defaults
  *
- * @defgroup APACHE_MPM_PREFORK Prefork MPM
+ * @defgroup APACHE_MPM_ITK Apache ITK
  * @ingroup APACHE_INTERNAL
  * @{
  */
